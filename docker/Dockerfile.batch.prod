# Multi-stage build for production batch service
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY batch/package*.json ./
RUN npm ci --omit=dev

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Install cron for scheduling
RUN apk add --no-cache dcron

# Create app user
RUN addgroup --system --gid 1001 batchuser
RUN adduser --system --uid 1001 batchuser

# Copy dependencies and source code
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./
COPY batch/ .

# Set up cron job (runs daily at 2 AM)
COPY batch/crontab /var/spool/cron/crontabs/batchuser
RUN chmod 0600 /var/spool/cron/crontabs/batchuser
RUN chown batchuser:batchuser /var/spool/cron/crontabs/batchuser

# Change ownership
RUN chown -R batchuser:batchuser /app

# Make sure cron directories exist with proper permissions
RUN mkdir -p /var/log /var/run
RUN chmod 755 /var/spool/cron/crontabs

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=30s --retries=5 \
  CMD ps aux | grep -v grep | grep crond > /dev/null || exit 1

# Create a startup script to check environment and start appropriately
RUN cat > /usr/local/bin/start-batch.sh << 'EOF'
#!/bin/sh
echo "Starting batch service..."

# Check if required environment variables are set
if [ -z "$DATABRICKS_TOKEN" ] || [ -z "$DATABRICKS_WORKSPACE_URL" ]; then
    echo "WARNING: Databricks credentials not configured"
    echo "DATABRICKS_TOKEN: ${DATABRICKS_TOKEN:-'not set'}"
    echo "DATABRICKS_WORKSPACE_URL: ${DATABRICKS_WORKSPACE_URL:-'not set'}"
    echo "Running in minimal mode - cron daemon only (no indexing jobs will run)"
fi

# Create log directory
mkdir -p /var/log

# Start cron daemon in foreground with logging
echo "Starting cron daemon..."
exec crond -f -l 2 -L /var/log/cron.log
EOF

RUN chmod +x /usr/local/bin/start-batch.sh

# Start using the startup script
CMD ["/usr/local/bin/start-batch.sh"]