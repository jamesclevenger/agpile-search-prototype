# Multi-stage build for production batch service
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY batch/package*.json ./
RUN npm ci --omit=dev

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

# Install cron for scheduling and netcat for connectivity checks
RUN apk add --no-cache dcron netcat-openbsd

# Create app user
RUN addgroup --system --gid 1001 batchuser
RUN adduser --system --uid 1001 batchuser

# Copy dependencies and source code
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./
COPY batch/ .

# Set up cron job (runs daily at 2 AM)
COPY batch/crontab /var/spool/cron/crontabs/batchuser
RUN chmod 0600 /var/spool/cron/crontabs/batchuser
RUN chown batchuser:batchuser /var/spool/cron/crontabs/batchuser

# Change ownership
RUN chown -R batchuser:batchuser /app

# Make sure cron directories exist with proper permissions
RUN mkdir -p /var/log /var/run
RUN chmod 755 /var/spool/cron/crontabs

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=30s --retries=5 \
  CMD ps aux | grep -v grep | grep crond > /dev/null || exit 1

# Create a startup script to check environment and start appropriately
RUN cat > /usr/local/bin/start-batch.sh << 'EOF'
#!/bin/sh
echo "Starting batch service..."
echo "Timestamp: $(date)"

# Check for debug mode
if [ "$BATCH_DEBUG" = "true" ]; then
    echo "DEBUG MODE: Starting infinite shell loop for troubleshooting"
    exec /bin/sh -c 'while true; do sleep 60; done'
fi

# Create log directory
mkdir -p /var/log

# Check if required environment variables are set
if [ -z "$DATABRICKS_TOKEN" ] || [ -z "$DATABRICKS_WORKSPACE_URL" ]; then
    echo "WARNING: Databricks credentials not configured"
    echo "DATABRICKS_TOKEN: ${DATABRICKS_TOKEN:+configured}"
    echo "DATABRICKS_WORKSPACE_URL: ${DATABRICKS_WORKSPACE_URL:-'not set'}"
    echo "Running in cron-only mode (no indexing jobs will run)"
else
    echo "Databricks credentials configured successfully"
fi

# Log startup completion
echo "Batch service startup completed at $(date)"
echo "Starting cron daemon in foreground..."

# Start cron daemon in foreground
exec crond -f -l 2 -L /var/log/cron.log
EOF

RUN chmod +x /usr/local/bin/start-batch.sh

# Create a manual job execution script
RUN cat > /usr/local/bin/run-indexing-job.sh << 'EOF'
#!/bin/sh
echo "Running Unity Catalog indexing job manually..."
echo "Timestamp: $(date)"

# Function to check if a service is available
check_service() {
    local host=$1
    local port=$2
    local service=$3
    local max_attempts=5
    local attempt=1
    
    echo "Checking $service connectivity at $host:$port..."
    while [ $attempt -le $max_attempts ]; do
        if nc -z "$host" "$port" 2>/dev/null; then
            echo "$service is available!"
            return 0
        fi
        echo "Attempt $attempt/$max_attempts: $service not ready, waiting 3s..."
        sleep 3
        attempt=$((attempt + 1))
    done
    echo "ERROR: $service not available after $max_attempts attempts"
    return 1
}

# Check if services are available
check_service "${MYSQL_HOST:-localhost}" "${MYSQL_PORT:-3306}" "MySQL" || exit 1
check_service "${SOLR_HOST:-localhost}" "${SOLR_PORT:-8983}" "Solr" || exit 1

# Check credentials
if [ -z "$DATABRICKS_TOKEN" ] || [ -z "$DATABRICKS_WORKSPACE_URL" ]; then
    echo "ERROR: Databricks credentials not configured"
    echo "DATABRICKS_TOKEN: ${DATABRICKS_TOKEN:+configured}"
    echo "DATABRICKS_WORKSPACE_URL: ${DATABRICKS_WORKSPACE_URL:-'not set'}"
    exit 1
fi

# Run the indexing job
echo "Starting indexing job..."
cd /app
exec node index.js
EOF

RUN chmod +x /usr/local/bin/run-indexing-job.sh

# Create a status check script
RUN cat > /usr/local/bin/batch-status.sh << 'EOF'
#!/bin/sh
echo "=== Batch Container Status ==="
echo "Timestamp: $(date)"
echo "Container uptime: $(uptime)"
echo ""

echo "=== Process Status ==="
ps aux

echo ""
echo "=== Service Connectivity ==="
echo -n "MySQL (${MYSQL_HOST:-localhost}:${MYSQL_PORT:-3306}): "
if nc -z "${MYSQL_HOST:-localhost}" "${MYSQL_PORT:-3306}" 2>/dev/null; then
    echo "✓ Available"
else
    echo "✗ Not available"
fi

echo -n "Solr (${SOLR_HOST:-localhost}:${SOLR_PORT:-8983}): "
if nc -z "${SOLR_HOST:-localhost}" "${SOLR_PORT:-8983}" 2>/dev/null; then
    echo "✓ Available"
else
    echo "✗ Not available"
fi

echo ""
echo "=== Environment ==="
echo "DATABRICKS_TOKEN: ${DATABRICKS_TOKEN:+configured}"
echo "DATABRICKS_WORKSPACE_URL: $DATABRICKS_WORKSPACE_URL"
echo "MYSQL_HOST: $MYSQL_HOST"
echo "SOLR_HOST: $SOLR_HOST"

echo ""
echo "=== Recent Cron Logs ==="
if [ -f /var/log/cron.log ]; then
    echo "Last 10 lines of cron log:"
    tail -n 10 /var/log/cron.log
else
    echo "No cron log found"
fi

echo ""
echo "=== Manual Job Execution ==="
echo "To run indexing job manually: /usr/local/bin/run-indexing-job.sh"
EOF

RUN chmod +x /usr/local/bin/batch-status.sh

# Start using the startup script
CMD ["/usr/local/bin/start-batch.sh"]